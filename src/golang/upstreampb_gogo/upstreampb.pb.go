// Code generated by protoc-gen-gogo.
// source: upstreampb.proto
// DO NOT EDIT!

/*
	Package upstreampb_gogo is a generated protocol buffer package.

	It is generated from these files:
		upstreampb.proto

	It has these top-level messages:
		UpstreamRequest
		UpstreamResponse
*/
package upstreampb_gogo

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type UpstreamRequest_FieldType int32

const (
	UpstreamRequest_UID      UpstreamRequest_FieldType = 0
	UpstreamRequest_DEVICEID UpstreamRequest_FieldType = 1
)

var UpstreamRequest_FieldType_name = map[int32]string{
	0: "UID",
	1: "DEVICEID",
}
var UpstreamRequest_FieldType_value = map[string]int32{
	"UID":      0,
	"DEVICEID": 1,
}

func (x UpstreamRequest_FieldType) Enum() *UpstreamRequest_FieldType {
	p := new(UpstreamRequest_FieldType)
	*p = x
	return p
}
func (x UpstreamRequest_FieldType) String() string {
	return proto.EnumName(UpstreamRequest_FieldType_name, int32(x))
}
func (x *UpstreamRequest_FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UpstreamRequest_FieldType_value, data, "UpstreamRequest_FieldType")
	if err != nil {
		return err
	}
	*x = UpstreamRequest_FieldType(value)
	return nil
}

type UpstreamRequest struct {
	NetId            uint32                    `protobuf:"varint,1,req,name=net_id" json:"net_id"`
	ReqId            uint32                    `protobuf:"varint,2,req,name=req_id" json:"req_id"`
	FieldType        UpstreamRequest_FieldType `protobuf:"varint,3,req,name=field_type,enum=upstreampb_gogo.UpstreamRequest_FieldType" json:"field_type"`
	Uid              *uint64                   `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	DeviceId         *string                   `protobuf:"bytes,5,opt,name=device_id" json:"device_id,omitempty"`
	Body             string                    `protobuf:"bytes,6,req,name=body" json:"body"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *UpstreamRequest) Reset()         { *m = UpstreamRequest{} }
func (m *UpstreamRequest) String() string { return proto.CompactTextString(m) }
func (*UpstreamRequest) ProtoMessage()    {}

func (m *UpstreamRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *UpstreamRequest) GetReqId() uint32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *UpstreamRequest) GetFieldType() UpstreamRequest_FieldType {
	if m != nil {
		return m.FieldType
	}
	return UpstreamRequest_UID
}

func (m *UpstreamRequest) GetUid() uint64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *UpstreamRequest) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *UpstreamRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type UpstreamResponse struct {
	NetId            uint32 `protobuf:"varint,1,req,name=net_id" json:"net_id"`
	ReqId            uint32 `protobuf:"varint,2,req,name=req_id" json:"req_id"`
	Body             string `protobuf:"bytes,3,req,name=body" json:"body"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UpstreamResponse) Reset()         { *m = UpstreamResponse{} }
func (m *UpstreamResponse) String() string { return proto.CompactTextString(m) }
func (*UpstreamResponse) ProtoMessage()    {}

func (m *UpstreamResponse) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *UpstreamResponse) GetReqId() uint32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *UpstreamResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterEnum("upstreampb_gogo.UpstreamRequest_FieldType", UpstreamRequest_FieldType_name, UpstreamRequest_FieldType_value)
}
func (m *UpstreamRequest) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.NetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ReqId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.FieldType |= (UpstreamRequest_FieldType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uid = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.DeviceId = &s
			index = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *UpstreamResponse) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.NetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ReqId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *UpstreamRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUpstreampb(uint64(m.NetId))
	n += 1 + sovUpstreampb(uint64(m.ReqId))
	n += 1 + sovUpstreampb(uint64(m.FieldType))
	if m.Uid != nil {
		n += 1 + sovUpstreampb(uint64(*m.Uid))
	}
	if m.DeviceId != nil {
		l = len(*m.DeviceId)
		n += 1 + l + sovUpstreampb(uint64(l))
	}
	l = len(m.Body)
	n += 1 + l + sovUpstreampb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUpstreampb(uint64(m.NetId))
	n += 1 + sovUpstreampb(uint64(m.ReqId))
	l = len(m.Body)
	n += 1 + l + sovUpstreampb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUpstreampb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUpstreampb(x uint64) (n int) {
	return sovUpstreampb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedUpstreamRequest(r randyUpstreampb, easy bool) *UpstreamRequest {
	this := &UpstreamRequest{}
	this.NetId = r.Uint32()
	this.ReqId = r.Uint32()
	this.FieldType = UpstreamRequest_FieldType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		v1 := uint64(r.Uint32())
		this.Uid = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringUpstreampb(r)
		this.DeviceId = &v2
	}
	this.Body = randStringUpstreampb(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUpstreampb(r, 7)
	}
	return this
}

func NewPopulatedUpstreamResponse(r randyUpstreampb, easy bool) *UpstreamResponse {
	this := &UpstreamResponse{}
	this.NetId = r.Uint32()
	this.ReqId = r.Uint32()
	this.Body = randStringUpstreampb(r)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUpstreampb(r, 4)
	}
	return this
}

type randyUpstreampb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUpstreampb(r randyUpstreampb) rune {
	return rune(r.Intn(126-43) + 43)
}
func randStringUpstreampb(r randyUpstreampb) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneUpstreampb(r)
	}
	return string(tmps)
}
func randUnrecognizedUpstreampb(r randyUpstreampb, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUpstreampb(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUpstreampb(data []byte, r randyUpstreampb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUpstreampb(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateUpstreampb(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateUpstreampb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUpstreampb(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUpstreampb(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUpstreampb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUpstreampb(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *UpstreamRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpstreamRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintUpstreampb(data, i, uint64(m.NetId))
	data[i] = 0x10
	i++
	i = encodeVarintUpstreampb(data, i, uint64(m.ReqId))
	data[i] = 0x18
	i++
	i = encodeVarintUpstreampb(data, i, uint64(m.FieldType))
	if m.Uid != nil {
		data[i] = 0x20
		i++
		i = encodeVarintUpstreampb(data, i, uint64(*m.Uid))
	}
	if m.DeviceId != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintUpstreampb(data, i, uint64(len(*m.DeviceId)))
		i += copy(data[i:], *m.DeviceId)
	}
	data[i] = 0x32
	i++
	i = encodeVarintUpstreampb(data, i, uint64(len(m.Body)))
	i += copy(data[i:], m.Body)
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpstreamResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpstreamResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintUpstreampb(data, i, uint64(m.NetId))
	data[i] = 0x10
	i++
	i = encodeVarintUpstreampb(data, i, uint64(m.ReqId))
	data[i] = 0x1a
	i++
	i = encodeVarintUpstreampb(data, i, uint64(len(m.Body)))
	i += copy(data[i:], m.Body)
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Upstreampb(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Upstreampb(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUpstreampb(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
