// Code generated by protoc-gen-gogo.
// source: statuspb.proto
// DO NOT EDIT!

/*
	Package statuspb_gogo is a generated protocol buffer package.

	It is generated from these files:
		statuspb.proto

	It has these top-level messages:
		StatusRequest
		StatusResponse
		StatusQueryResult
		StatusQueryResponse
		StatusMap
		StringToIntMap
		AnonymousMap
*/
package statuspb_gogo

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type StatusRequest_Type int32

const (
	StatusRequest_ONLINE            StatusRequest_Type = 0
	StatusRequest_OFFLINE           StatusRequest_Type = 1
	StatusRequest_GET               StatusRequest_Type = 2
	StatusRequest_REPLICATE_ONLINE  StatusRequest_Type = 3
	StatusRequest_REPLICATE_OFFLINE StatusRequest_Type = 4
)

var StatusRequest_Type_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
	2: "GET",
	3: "REPLICATE_ONLINE",
	4: "REPLICATE_OFFLINE",
}
var StatusRequest_Type_value = map[string]int32{
	"ONLINE":            0,
	"OFFLINE":           1,
	"GET":               2,
	"REPLICATE_ONLINE":  3,
	"REPLICATE_OFFLINE": 4,
}

func (x StatusRequest_Type) Enum() *StatusRequest_Type {
	p := new(StatusRequest_Type)
	*p = x
	return p
}
func (x StatusRequest_Type) String() string {
	return proto.EnumName(StatusRequest_Type_name, int32(x))
}
func (x *StatusRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusRequest_Type_value, data, "StatusRequest_Type")
	if err != nil {
		return err
	}
	*x = StatusRequest_Type(value)
	return nil
}

type StatusRequest_FieldType int32

const (
	StatusRequest_UID      StatusRequest_FieldType = 0
	StatusRequest_DEVICEID StatusRequest_FieldType = 1
)

var StatusRequest_FieldType_name = map[int32]string{
	0: "UID",
	1: "DEVICEID",
}
var StatusRequest_FieldType_value = map[string]int32{
	"UID":      0,
	"DEVICEID": 1,
}

func (x StatusRequest_FieldType) Enum() *StatusRequest_FieldType {
	p := new(StatusRequest_FieldType)
	*p = x
	return p
}
func (x StatusRequest_FieldType) String() string {
	return proto.EnumName(StatusRequest_FieldType_name, int32(x))
}
func (x *StatusRequest_FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusRequest_FieldType_value, data, "StatusRequest_FieldType")
	if err != nil {
		return err
	}
	*x = StatusRequest_FieldType(value)
	return nil
}

type StatusResponse_Type int32

const (
	StatusResponse_OK            StatusResponse_Type = 0
	StatusResponse_FORCE_OFFLINE StatusResponse_Type = 1
)

var StatusResponse_Type_name = map[int32]string{
	0: "OK",
	1: "FORCE_OFFLINE",
}
var StatusResponse_Type_value = map[string]int32{
	"OK":            0,
	"FORCE_OFFLINE": 1,
}

func (x StatusResponse_Type) Enum() *StatusResponse_Type {
	p := new(StatusResponse_Type)
	*p = x
	return p
}
func (x StatusResponse_Type) String() string {
	return proto.EnumName(StatusResponse_Type_name, int32(x))
}
func (x *StatusResponse_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusResponse_Type_value, data, "StatusResponse_Type")
	if err != nil {
		return err
	}
	*x = StatusResponse_Type(value)
	return nil
}

type StatusQueryResponse_Type int32

const (
	StatusQueryResponse_FOUND     StatusQueryResponse_Type = 0
	StatusQueryResponse_NOT_FOUND StatusQueryResponse_Type = 1
)

var StatusQueryResponse_Type_name = map[int32]string{
	0: "FOUND",
	1: "NOT_FOUND",
}
var StatusQueryResponse_Type_value = map[string]int32{
	"FOUND":     0,
	"NOT_FOUND": 1,
}

func (x StatusQueryResponse_Type) Enum() *StatusQueryResponse_Type {
	p := new(StatusQueryResponse_Type)
	*p = x
	return p
}
func (x StatusQueryResponse_Type) String() string {
	return proto.EnumName(StatusQueryResponse_Type_name, int32(x))
}
func (x *StatusQueryResponse_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusQueryResponse_Type_value, data, "StatusQueryResponse_Type")
	if err != nil {
		return err
	}
	*x = StatusQueryResponse_Type(value)
	return nil
}

type StatusRequest struct {
	ReqType    StatusRequest_Type      `protobuf:"varint,1,req,name=req_type,enum=statuspb_gogo.StatusRequest_Type" json:"req_type"`
	FieldType  StatusRequest_FieldType `protobuf:"varint,2,req,name=field_type,enum=statuspb_gogo.StatusRequest_FieldType" json:"field_type"`
	Uid        *uint64                 `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	AppVersion *string                 `protobuf:"bytes,4,opt,name=app_version" json:"app_version,omitempty"`
	DeviceId   *string                 `protobuf:"bytes,5,opt,name=device_id" json:"device_id,omitempty"`
	NetId      *uint32                 `protobuf:"varint,6,opt,name=net_id" json:"net_id,omitempty"`
	Timestamp  *uint64                 `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// for push server only
	ResumeNetId *uint32 `protobuf:"varint,8,opt,name=resume_net_id" json:"resume_net_id,omitempty"`
	// for replication server only
	ServerId         uint32 `protobuf:"varint,9,req,name=server_id" json:"server_id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}

func (m *StatusRequest) GetReqType() StatusRequest_Type {
	if m != nil {
		return m.ReqType
	}
	return StatusRequest_ONLINE
}

func (m *StatusRequest) GetFieldType() StatusRequest_FieldType {
	if m != nil {
		return m.FieldType
	}
	return StatusRequest_UID
}

func (m *StatusRequest) GetUid() uint64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *StatusRequest) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *StatusRequest) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *StatusRequest) GetNetId() uint32 {
	if m != nil && m.NetId != nil {
		return *m.NetId
	}
	return 0
}

func (m *StatusRequest) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *StatusRequest) GetResumeNetId() uint32 {
	if m != nil && m.ResumeNetId != nil {
		return *m.ResumeNetId
	}
	return 0
}

func (m *StatusRequest) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type StatusResponse struct {
	RespType         StatusResponse_Type `protobuf:"varint,1,req,name=resp_type,enum=statuspb_gogo.StatusResponse_Type" json:"resp_type"`
	NetId            uint32              `protobuf:"varint,2,req,name=net_id" json:"net_id"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}

func (m *StatusResponse) GetRespType() StatusResponse_Type {
	if m != nil {
		return m.RespType
	}
	return StatusResponse_OK
}

func (m *StatusResponse) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

type StatusQueryResult struct {
	RemoteNetId      uint32 `protobuf:"varint,1,req,name=remote_net_id" json:"remote_net_id"`
	Ip               uint32 `protobuf:"varint,2,req,name=ip" json:"ip"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatusQueryResult) Reset()         { *m = StatusQueryResult{} }
func (m *StatusQueryResult) String() string { return proto.CompactTextString(m) }
func (*StatusQueryResult) ProtoMessage()    {}

func (m *StatusQueryResult) GetRemoteNetId() uint32 {
	if m != nil {
		return m.RemoteNetId
	}
	return 0
}

func (m *StatusQueryResult) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

type StatusQueryResponse struct {
	Resp             StatusQueryResponse_Type `protobuf:"varint,1,req,name=resp,enum=statuspb_gogo.StatusQueryResponse_Type" json:"resp"`
	ResumeNetId      uint32                   `protobuf:"varint,2,req,name=resume_net_id" json:"resume_net_id"`
	Result           []*StatusQueryResult     `protobuf:"bytes,3,rep,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *StatusQueryResponse) Reset()         { *m = StatusQueryResponse{} }
func (m *StatusQueryResponse) String() string { return proto.CompactTextString(m) }
func (*StatusQueryResponse) ProtoMessage()    {}

func (m *StatusQueryResponse) GetResp() StatusQueryResponse_Type {
	if m != nil {
		return m.Resp
	}
	return StatusQueryResponse_FOUND
}

func (m *StatusQueryResponse) GetResumeNetId() uint32 {
	if m != nil {
		return m.ResumeNetId
	}
	return 0
}

func (m *StatusQueryResponse) GetResult() []*StatusQueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type StatusMap struct {
	Map              []*StatusMap_KVUserStatus `protobuf:"bytes,1,rep,name=map" json:"map,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *StatusMap) Reset()         { *m = StatusMap{} }
func (m *StatusMap) String() string { return proto.CompactTextString(m) }
func (*StatusMap) ProtoMessage()    {}

func (m *StatusMap) GetMap() []*StatusMap_KVUserStatus {
	if m != nil {
		return m.Map
	}
	return nil
}

type StatusMap_KVUserStatus struct {
	Key              uint64                               `protobuf:"varint,1,req" json:"Key"`
	Values           []*StatusMap_KVUserStatus_UserStatus `protobuf:"bytes,2,rep" json:"Values,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *StatusMap_KVUserStatus) Reset()         { *m = StatusMap_KVUserStatus{} }
func (m *StatusMap_KVUserStatus) String() string { return proto.CompactTextString(m) }
func (*StatusMap_KVUserStatus) ProtoMessage()    {}

func (m *StatusMap_KVUserStatus) GetKey() uint64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *StatusMap_KVUserStatus) GetValues() []*StatusMap_KVUserStatus_UserStatus {
	if m != nil {
		return m.Values
	}
	return nil
}

type StatusMap_KVUserStatus_UserStatus struct {
	DeviceId         string `protobuf:"bytes,1,req,name=device_id" json:"device_id"`
	Timestamp        uint64 `protobuf:"varint,2,req,name=timestamp" json:"timestamp"`
	ServerId         uint32 `protobuf:"varint,3,req,name=server_id" json:"server_id"`
	NetId            uint32 `protobuf:"varint,4,req,name=net_id" json:"net_id"`
	AppVersion       uint32 `protobuf:"varint,5,req,name=app_version" json:"app_version"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StatusMap_KVUserStatus_UserStatus) Reset()         { *m = StatusMap_KVUserStatus_UserStatus{} }
func (m *StatusMap_KVUserStatus_UserStatus) String() string { return proto.CompactTextString(m) }
func (*StatusMap_KVUserStatus_UserStatus) ProtoMessage()    {}

func (m *StatusMap_KVUserStatus_UserStatus) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *StatusMap_KVUserStatus_UserStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *StatusMap_KVUserStatus_UserStatus) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *StatusMap_KVUserStatus_UserStatus) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *StatusMap_KVUserStatus_UserStatus) GetAppVersion() uint32 {
	if m != nil {
		return m.AppVersion
	}
	return 0
}

type StringToIntMap struct {
	Map              []*StringToIntMap_STI `protobuf:"bytes,1,rep,name=map" json:"map,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *StringToIntMap) Reset()         { *m = StringToIntMap{} }
func (m *StringToIntMap) String() string { return proto.CompactTextString(m) }
func (*StringToIntMap) ProtoMessage()    {}

func (m *StringToIntMap) GetMap() []*StringToIntMap_STI {
	if m != nil {
		return m.Map
	}
	return nil
}

type StringToIntMap_STI struct {
	Str              string `protobuf:"bytes,1,req,name=str" json:"str"`
	Intger           uint32 `protobuf:"varint,2,req,name=intger" json:"intger"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StringToIntMap_STI) Reset()         { *m = StringToIntMap_STI{} }
func (m *StringToIntMap_STI) String() string { return proto.CompactTextString(m) }
func (*StringToIntMap_STI) ProtoMessage()    {}

func (m *StringToIntMap_STI) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *StringToIntMap_STI) GetIntger() uint32 {
	if m != nil {
		return m.Intger
	}
	return 0
}

type AnonymousMap struct {
	Map              []*AnonymousMap_AnonymousEntry `protobuf:"bytes,1,rep,name=map" json:"map,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *AnonymousMap) Reset()         { *m = AnonymousMap{} }
func (m *AnonymousMap) String() string { return proto.CompactTextString(m) }
func (*AnonymousMap) ProtoMessage()    {}

func (m *AnonymousMap) GetMap() []*AnonymousMap_AnonymousEntry {
	if m != nil {
		return m.Map
	}
	return nil
}

type AnonymousMap_AnonymousEntry struct {
	DevId            string `protobuf:"bytes,1,req,name=dev_id" json:"dev_id"`
	Timestamp        uint64 `protobuf:"varint,2,req,name=timestamp" json:"timestamp"`
	NetId            uint32 `protobuf:"varint,3,req,name=net_id" json:"net_id"`
	ServerId         uint32 `protobuf:"varint,4,req,name=server_id" json:"server_id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AnonymousMap_AnonymousEntry) Reset()         { *m = AnonymousMap_AnonymousEntry{} }
func (m *AnonymousMap_AnonymousEntry) String() string { return proto.CompactTextString(m) }
func (*AnonymousMap_AnonymousEntry) ProtoMessage()    {}

func (m *AnonymousMap_AnonymousEntry) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *AnonymousMap_AnonymousEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AnonymousMap_AnonymousEntry) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *AnonymousMap_AnonymousEntry) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func init() {
	proto.RegisterEnum("statuspb_gogo.StatusRequest_Type", StatusRequest_Type_name, StatusRequest_Type_value)
	proto.RegisterEnum("statuspb_gogo.StatusRequest_FieldType", StatusRequest_FieldType_name, StatusRequest_FieldType_value)
	proto.RegisterEnum("statuspb_gogo.StatusResponse_Type", StatusResponse_Type_name, StatusResponse_Type_value)
	proto.RegisterEnum("statuspb_gogo.StatusQueryResponse_Type", StatusQueryResponse_Type_name, StatusQueryResponse_Type_value)
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ReqType |= (StatusRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.FieldType |= (StatusRequest_FieldType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uid = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.AppVersion = &s
			index = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.DeviceId = &s
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NetId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeNetId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResumeNetId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusResponse) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespType", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.RespType |= (StatusResponse_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.NetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusQueryResult) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteNetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.RemoteNetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Ip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusQueryResponse) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Resp |= (StatusQueryResponse_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeNetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ResumeNetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &StatusQueryResult{})
			m.Result[len(m.Result)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusMap) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = append(m.Map, &StatusMap_KVUserStatus{})
			m.Map[len(m.Map)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusMap_KVUserStatus) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Key |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &StatusMap_KVUserStatus_UserStatus{})
			m.Values[len(m.Values)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusMap_KVUserStatus_UserStatus) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.NetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.AppVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StringToIntMap) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = append(m.Map, &StringToIntMap_STI{})
			m.Map[len(m.Map)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StringToIntMap_STI) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intger", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Intger |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AnonymousMap) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = append(m.Map, &AnonymousMap_AnonymousEntry{})
			m.Map[len(m.Map)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AnonymousMap_AnonymousEntry) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.NetId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.ServerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStatuspb(uint64(m.ReqType))
	n += 1 + sovStatuspb(uint64(m.FieldType))
	if m.Uid != nil {
		n += 1 + sovStatuspb(uint64(*m.Uid))
	}
	if m.AppVersion != nil {
		l = len(*m.AppVersion)
		n += 1 + l + sovStatuspb(uint64(l))
	}
	if m.DeviceId != nil {
		l = len(*m.DeviceId)
		n += 1 + l + sovStatuspb(uint64(l))
	}
	if m.NetId != nil {
		n += 1 + sovStatuspb(uint64(*m.NetId))
	}
	if m.Timestamp != nil {
		n += 1 + sovStatuspb(uint64(*m.Timestamp))
	}
	if m.ResumeNetId != nil {
		n += 1 + sovStatuspb(uint64(*m.ResumeNetId))
	}
	n += 1 + sovStatuspb(uint64(m.ServerId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStatuspb(uint64(m.RespType))
	n += 1 + sovStatuspb(uint64(m.NetId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusQueryResult) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStatuspb(uint64(m.RemoteNetId))
	n += 1 + sovStatuspb(uint64(m.Ip))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusQueryResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStatuspb(uint64(m.Resp))
	n += 1 + sovStatuspb(uint64(m.ResumeNetId))
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovStatuspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, e := range m.Map {
			l = e.Size()
			n += 1 + l + sovStatuspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusMap_KVUserStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovStatuspb(uint64(m.Key))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovStatuspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusMap_KVUserStatus_UserStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeviceId)
	n += 1 + l + sovStatuspb(uint64(l))
	n += 1 + sovStatuspb(uint64(m.Timestamp))
	n += 1 + sovStatuspb(uint64(m.ServerId))
	n += 1 + sovStatuspb(uint64(m.NetId))
	n += 1 + sovStatuspb(uint64(m.AppVersion))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringToIntMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, e := range m.Map {
			l = e.Size()
			n += 1 + l + sovStatuspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringToIntMap_STI) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovStatuspb(uint64(l))
	n += 1 + sovStatuspb(uint64(m.Intger))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnonymousMap) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, e := range m.Map {
			l = e.Size()
			n += 1 + l + sovStatuspb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnonymousMap_AnonymousEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevId)
	n += 1 + l + sovStatuspb(uint64(l))
	n += 1 + sovStatuspb(uint64(m.Timestamp))
	n += 1 + sovStatuspb(uint64(m.NetId))
	n += 1 + sovStatuspb(uint64(m.ServerId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatuspb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatuspb(x uint64) (n int) {
	return sovStatuspb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedStatusRequest(r randyStatuspb, easy bool) *StatusRequest {
	this := &StatusRequest{}
	this.ReqType = StatusRequest_Type([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.FieldType = StatusRequest_FieldType([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		v1 := uint64(r.Uint32())
		this.Uid = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringStatuspb(r)
		this.AppVersion = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringStatuspb(r)
		this.DeviceId = &v3
	}
	if r.Intn(10) != 0 {
		v4 := r.Uint32()
		this.NetId = &v4
	}
	if r.Intn(10) != 0 {
		v5 := uint64(r.Uint32())
		this.Timestamp = &v5
	}
	if r.Intn(10) != 0 {
		v6 := r.Uint32()
		this.ResumeNetId = &v6
	}
	this.ServerId = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 10)
	}
	return this
}

func NewPopulatedStatusResponse(r randyStatuspb, easy bool) *StatusResponse {
	this := &StatusResponse{}
	this.RespType = StatusResponse_Type([]int32{0, 1}[r.Intn(2)])
	this.NetId = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 3)
	}
	return this
}

func NewPopulatedStatusQueryResult(r randyStatuspb, easy bool) *StatusQueryResult {
	this := &StatusQueryResult{}
	this.RemoteNetId = r.Uint32()
	this.Ip = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 3)
	}
	return this
}

func NewPopulatedStatusQueryResponse(r randyStatuspb, easy bool) *StatusQueryResponse {
	this := &StatusQueryResponse{}
	this.Resp = StatusQueryResponse_Type([]int32{0, 1}[r.Intn(2)])
	this.ResumeNetId = r.Uint32()
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Result = make([]*StatusQueryResult, v7)
		for i := 0; i < v7; i++ {
			this.Result[i] = NewPopulatedStatusQueryResult(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 4)
	}
	return this
}

func NewPopulatedStatusMap(r randyStatuspb, easy bool) *StatusMap {
	this := &StatusMap{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Map = make([]*StatusMap_KVUserStatus, v8)
		for i := 0; i < v8; i++ {
			this.Map[i] = NewPopulatedStatusMap_KVUserStatus(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 2)
	}
	return this
}

func NewPopulatedStatusMap_KVUserStatus(r randyStatuspb, easy bool) *StatusMap_KVUserStatus {
	this := &StatusMap_KVUserStatus{}
	this.Key = uint64(r.Uint32())
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.Values = make([]*StatusMap_KVUserStatus_UserStatus, v9)
		for i := 0; i < v9; i++ {
			this.Values[i] = NewPopulatedStatusMap_KVUserStatus_UserStatus(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 3)
	}
	return this
}

func NewPopulatedStatusMap_KVUserStatus_UserStatus(r randyStatuspb, easy bool) *StatusMap_KVUserStatus_UserStatus {
	this := &StatusMap_KVUserStatus_UserStatus{}
	this.DeviceId = randStringStatuspb(r)
	this.Timestamp = uint64(r.Uint32())
	this.ServerId = r.Uint32()
	this.NetId = r.Uint32()
	this.AppVersion = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 6)
	}
	return this
}

func NewPopulatedStringToIntMap(r randyStatuspb, easy bool) *StringToIntMap {
	this := &StringToIntMap{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Map = make([]*StringToIntMap_STI, v10)
		for i := 0; i < v10; i++ {
			this.Map[i] = NewPopulatedStringToIntMap_STI(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 2)
	}
	return this
}

func NewPopulatedStringToIntMap_STI(r randyStatuspb, easy bool) *StringToIntMap_STI {
	this := &StringToIntMap_STI{}
	this.Str = randStringStatuspb(r)
	this.Intger = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 3)
	}
	return this
}

func NewPopulatedAnonymousMap(r randyStatuspb, easy bool) *AnonymousMap {
	this := &AnonymousMap{}
	if r.Intn(10) != 0 {
		v11 := r.Intn(10)
		this.Map = make([]*AnonymousMap_AnonymousEntry, v11)
		for i := 0; i < v11; i++ {
			this.Map[i] = NewPopulatedAnonymousMap_AnonymousEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 2)
	}
	return this
}

func NewPopulatedAnonymousMap_AnonymousEntry(r randyStatuspb, easy bool) *AnonymousMap_AnonymousEntry {
	this := &AnonymousMap_AnonymousEntry{}
	this.DevId = randStringStatuspb(r)
	this.Timestamp = uint64(r.Uint32())
	this.NetId = r.Uint32()
	this.ServerId = r.Uint32()
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedStatuspb(r, 5)
	}
	return this
}

type randyStatuspb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneStatuspb(r randyStatuspb) rune {
	return rune(r.Intn(126-43) + 43)
}
func randStringStatuspb(r randyStatuspb) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneStatuspb(r)
	}
	return string(tmps)
}
func randUnrecognizedStatuspb(r randyStatuspb, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldStatuspb(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldStatuspb(data []byte, r randyStatuspb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateStatuspb(data, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		data = encodeVarintPopulateStatuspb(data, uint64(v13))
	case 1:
		data = encodeVarintPopulateStatuspb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateStatuspb(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateStatuspb(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateStatuspb(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateStatuspb(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.ReqType))
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.FieldType))
	if m.Uid != nil {
		data[i] = 0x18
		i++
		i = encodeVarintStatuspb(data, i, uint64(*m.Uid))
	}
	if m.AppVersion != nil {
		data[i] = 0x22
		i++
		i = encodeVarintStatuspb(data, i, uint64(len(*m.AppVersion)))
		i += copy(data[i:], *m.AppVersion)
	}
	if m.DeviceId != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintStatuspb(data, i, uint64(len(*m.DeviceId)))
		i += copy(data[i:], *m.DeviceId)
	}
	if m.NetId != nil {
		data[i] = 0x30
		i++
		i = encodeVarintStatuspb(data, i, uint64(*m.NetId))
	}
	if m.Timestamp != nil {
		data[i] = 0x38
		i++
		i = encodeVarintStatuspb(data, i, uint64(*m.Timestamp))
	}
	if m.ResumeNetId != nil {
		data[i] = 0x40
		i++
		i = encodeVarintStatuspb(data, i, uint64(*m.ResumeNetId))
	}
	data[i] = 0x48
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.ServerId))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.RespType))
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.NetId))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusQueryResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusQueryResult) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.RemoteNetId))
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Ip))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusQueryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusQueryResponse) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Resp))
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.ResumeNetId))
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			data[i] = 0x1a
			i++
			i = encodeVarintStatuspb(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusMap) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, msg := range m.Map {
			data[i] = 0xa
			i++
			i = encodeVarintStatuspb(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusMap_KVUserStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusMap_KVUserStatus) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Key))
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			data[i] = 0x12
			i++
			i = encodeVarintStatuspb(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusMap_KVUserStatus_UserStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusMap_KVUserStatus_UserStatus) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintStatuspb(data, i, uint64(len(m.DeviceId)))
	i += copy(data[i:], m.DeviceId)
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Timestamp))
	data[i] = 0x18
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.ServerId))
	data[i] = 0x20
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.NetId))
	data[i] = 0x28
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.AppVersion))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StringToIntMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StringToIntMap) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, msg := range m.Map {
			data[i] = 0xa
			i++
			i = encodeVarintStatuspb(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StringToIntMap_STI) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StringToIntMap_STI) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintStatuspb(data, i, uint64(len(m.Str)))
	i += copy(data[i:], m.Str)
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Intger))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnonymousMap) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AnonymousMap) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for _, msg := range m.Map {
			data[i] = 0xa
			i++
			i = encodeVarintStatuspb(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnonymousMap_AnonymousEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AnonymousMap_AnonymousEntry) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintStatuspb(data, i, uint64(len(m.DevId)))
	i += copy(data[i:], m.DevId)
	data[i] = 0x10
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.Timestamp))
	data[i] = 0x18
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.NetId))
	data[i] = 0x20
	i++
	i = encodeVarintStatuspb(data, i, uint64(m.ServerId))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Statuspb(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Statuspb(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStatuspb(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
